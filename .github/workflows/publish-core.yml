name: Publish core

on:
  push:
    branches:
      - "monorepo"
    paths:
      - "packages/core/package.json"
      - "packages/core/**"

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    name: Conditional Publish (core)

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version change
        id: check_version
        working-directory: packages/core
        run: |
          set -e

          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current version: $CURRENT_VERSION"

          LAST_CHANGE_COMMIT=$(git log -S'"version":' -n 1 --pretty=format:%H -- package.json || echo "")
          if [ -z "$LAST_CHANGE_COMMIT" ]; then
            echo "No previous version change found. Assuming version changed."
            echo "publish=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Last version change commit: $LAST_CHANGE_COMMIT"

          OLD_VERSION=$(git show ${LAST_CHANGE_COMMIT}:packages/core/package.json | jq -r '.version')
          echo "Previous version: $OLD_VERSION"

          if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
            echo "Version changed."
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged."
            echo "publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node
        if: steps.check_version.outputs.publish == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
        env:
          DISABLE_V8_COMPILE_CACHE: 1

      - name: Enable Corepack
        if: steps.check_version.outputs.publish == 'true'
        run: corepack enable

      - name: Install dependencies
        if: steps.check_version.outputs.publish == 'true'
        run: yarn install --no-immutable

      - name: Build
        if: steps.check_version.outputs.publish == 'true'
        working-directory: packages/core
        run: yarn build

      - name: Publish
        if: steps.check_version.outputs.publish == 'true'
        working-directory: packages/core
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
          npm publish --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
