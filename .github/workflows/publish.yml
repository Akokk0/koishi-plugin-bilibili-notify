name: Publish Packages

on:
  push:
    branches:
      - "monorepo"
    paths:
      - "packages/**/package.json"

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [core, advanced-subscription]
    name: Publish (${{ matrix.package }})

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version change
        id: check_version
        run: |
          set -e
          PKG="packages/${{ matrix.package }}/package.json"

          CURRENT_VERSION=$(jq -r '.version' "$PKG")
          echo "Current version: $CURRENT_VERSION"

          # 找到上一个 commit 的版本号
          PREVIOUS_VERSION=$(git show HEAD^:"$PKG" 2>/dev/null | jq -r '.version' || echo "")
          echo "Previous version: $PREVIOUS_VERSION"

          if [ -z "$PREVIOUS_VERSION" ]; then
            echo "First release of this package (no previous version)."
            echo "publish=true" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version bump detected: $PREVIOUS_VERSION → $CURRENT_VERSION"
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "No new version bump in this push."
            echo "publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node
        if: steps.check_version.outputs.publish == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
        env:
          DISABLE_V8_COMPILE_CACHE: 1

      - name: Enable Corepack
        if: steps.check_version.outputs.publish == 'true'
        run: corepack enable

      - name: Install dependencies
        if: steps.check_version.outputs.publish == 'true'
        run: yarn install --no-immutable

      - name: Build
        if: steps.check_version.outputs.publish == 'true'
        working-directory: packages/${{ matrix.package }}
        run: yarn build

      - name: Publish
        if: steps.check_version.outputs.publish == 'true'
        working-directory: packages/${{ matrix.package }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
          npm publish --provenance --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
